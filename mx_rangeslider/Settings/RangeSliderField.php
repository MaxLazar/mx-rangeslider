<?php

/**
 * MX Range Slider plugin.
 *
 *
 * @see      https://www.wiseupstudio.com
 *
 * @copyright Copyright (c) 2020 maxlazar
 */

/**
 * @author    maxlazar
 *
 * @since     3.0.0
 */

return [
  'skin' => [
    'option' => 'skin',
    'data-attr' => 'data-skin',
    'defaults' => 'modern',
    'type' => 'select',
    'values' => [
      'flat' => 'flat',
      'big' => 'big',
      'modern' => 'modern',
      'round' => 'round',
      'sharp' => 'sharp',
      'square' => 'square',
    ],
    'description' => 'Choose UI skin to use (flat, big, modern, round, sharp, square)',
  ],
  'type' => [
    'option' => 'type',
    'data-attr' => 'data-type',
    'defaults' => 'single',
    'type' => 'select',
    'values' => [
      'single' => 'single',
      'double' => 'double',
    ],
    'description' => 'Choose slider type, could be single - for one handle, or double for two handles',
  ],
  'min' => [
    'option' => 'min',
    'data-attr' => 'data-min',
    'defaults' => 10,
    'type' => 'number',
    'description' => 'Set slider minimum value',
  ],
  'max' => [
    'option' => 'max',
    'data-attr' => 'data-max',
    'defaults' => 100,
    'type' => 'number',
    'description' => 'Set slider maximum value',
  ],
  'from' => [
    'option' => 'from',
    'data-attr' => 'data-from',
    'defaults' => '',
    'type' => 'number',
    'description' => 'Set start position for left handle (or for single handle)',
  ],
  'to' => [
    'option' => 'to',
    'data-attr' => 'data-to',
    'defaults' => '',
    'type' => 'number',
    'description' => 'Set start position for right handle',
  ],
  'step' => [
    'option' => 'step',
    'data-attr' => 'data-step',
    'defaults' => 1,
    'type' => 'number',
    'description' => 'Set sliders step. Always > 0. Could be fractional',
  ],
  'min_interval' => [
    'option' => 'min_interval',
    'data-attr' => 'data-min-interval',
    'defaults' => '',
    'type' => 'number',
    'description' => 'Set minimum diapason between sliders. Only for double type',
  ],
  'max_interval' => [
    'option' => 'max_interval',
    'data-attr' => 'data-max-interval',
    'defaults' => '',
    'type' => 'number',
    'description' => 'Set minimum maximum between sliders. Only for double type',
  ],
  'drag_interval' => [
    'option' => 'drag_interval',
    'data-attr' => 'data-drag-interval',
    'defaults' => '0',
    'type' => 'boolean',
    'description' => 'Allow user to drag whole range. Only for double type',
  ],
  'values' => [
    'option' => 'values',
    'data-attr' => 'data-values',
    'defaults' => '',
    'type' => 'array',
    'description' => 'Set up your own array of possible slider values. They could be numbers or strings. If the values array is set up, min, max and step param, can no longer be changed',
  ],
  'from_fixed' => [
    'option' => 'from_fixed',
    'data-attr' => 'data-from-fixed',
    'defaults' => 0,
    'type' => 'boolean',
    'description' => 'Fix position of left (or single) handle',
  ],
  'from_min' => [
    'option' => 'from_min',
    'data-attr' => 'data-from-min',
    'defaults' => '',
    'type' => 'number',
    'description' => 'Set minimum limit for left (or single) handle',
  ],
  'from_max' => [
    'option' => 'from_max',
    'data-attr' => 'data-from-max',
    'defaults' => '',
    'type' => 'number',
    'description' => 'Set maximum limit for left (or single) handle',
  ],
  'from_shadow' => [
    'option' => 'from_shadow',
    'data-attr' => 'data-from-shadow',
    'defaults' => 0,
    'type' => 'boolean',
    'description' => 'Highlight the limits for left handle',
  ],
  'to_fixed' => [
    'option' => 'to_fixed',
    'data-attr' => 'data-to-fixed',
    'defaults' => 0,
    'type' => 'boolean',
    'description' => 'Fix position of right handle',
  ],
  'to_min' => [
    'option' => 'to_min',
    'data-attr' => 'data-to-min',
    'defaults' => '',
    'type' => 'number',
    'description' => 'Set minimum limit for right handle',
  ],
  'to_max' => [
    'option' => 'to_max',
    'data-attr' => 'data-to-max',
    'defaults' => '',
    'type' => 'number',
    'description' => 'Set maximum limit for right handle',
  ],
  'to_shadow' => [
    'option' => 'to_shadow',
    'data-attr' => 'data-to-shadow',
    'defaults' => 0,
    'type' => 'boolean',
    'description' => 'Highlight the right handle',
  ],
  'prettify_enabled' => [
    'option' => 'prettify_enabled',
    'data-attr' => 'data-prettify-enabled',
    'defaults' => 1,
    'type' => 'boolean',
    'description' => 'Improve readability of long numbers: 10000000 → 10 000 000',
  ],
  'prettify_separator' => [
    'option' => 'prettify_separator',
    'data-attr' => 'data-prettify-separator',
    'defaults' => '',
    'type' => 'string',
    'description' => 'Set up your own separator for long numbers: 10000000 → 10,000,000 etc.',
  ],
  'force_edges' => [
    'option' => 'force_edges',
    'data-attr' => 'data-force-edges',
    'defaults' => 0,
    'type' => 'boolean',
    'description' => 'Sliders handles and tooltips will be always inside it\'s container',
  ],
  'keyboard' => [
    'option' => 'keyboard',
    'data-attr' => 'data-keyboard',
    'defaults' => 1,
    'type' => 'boolean',
    'description' => 'Activates keyboard controls. Move left: ←, ↓, A, S. Move right: →, ↑, W, D.',
  ],
  'grid' => [
    'option' => 'grid',
    'data-attr' => 'data-grid',
    'defaults' => 1,
    'type' => 'boolean',
    'description' => 'Enables grid of values above the slider',
  ],
  'grid_margin' => [
    'option' => 'grid_margin',
    'data-attr' => 'data-grid-margin',
    'defaults' => 1,
    'type' => 'boolean',
    'description' => 'Set left and right grid gaps',
  ],
  'grid_num' => [
    'option' => 'grid_num',
    'data-attr' => 'data-grid-num',
    'defaults' => 4,
    'type' => 'number',
    'description' => 'Number of grid units',
  ],
  'grid_snap' => [
    'option' => 'grid_snap',
    'data-attr' => 'data-grid-snap',
    'defaults' => 0,
    'type' => 'boolean',
    'description' => 'Snap grid to sliders step (step param). If activated, grid_num will not be used. Max steps = 50',
  ],
  'hide_min_max' => [
    'option' => 'hide_min_max',
    'data-attr' => 'data-hide-min-max',
    'defaults' => 0,
    'type' => 'boolean',
    'description' => 'Hides min and max labels',
  ],
  'hide_from_to' => [
    'option' => 'hide_from_to',
    'data-attr' => 'data-hide-from-to',
    'defaults' => 0,
    'type' => 'boolean',
    'description' => 'Hides from and to labels',
  ],
  'prefix' => [
    'option' => 'prefix',
    'data-attr' => 'data-prefix',
    'defaults' => '',
    'type' => 'string',
    'description' => 'Set prefix for values. Will be set up right before the number: **$**100',
  ],
  'postfix' => [
    'option' => 'postfix',
    'data-attr' => 'data-postfix',
    'defaults' => '',
    'type' => 'string',
    'description' => 'Set postfix for values. Will be set up right after the number: 100k',
  ],
  'max_postfix' => [
    'option' => 'max_postfix',
    'data-attr' => 'data-max-postfix',
    'defaults' => '',
    'type' => 'string',
    'description' => 'Special postfix, used only for maximum value. Will be showed after handle will reach maximum right position. For example 0 — 100+',
  ],
  'decorate_both' => [
    'option' => 'decorate_both',
    'data-attr' => 'data-decorate-both',
    'defaults' => 1,
    'type' => 'boolean',
    'description' => 'Used for double type and only if prefix or postfix was set up. Determine how to decorate close values. For example: $10k — $100k or $10 — 100k',
  ],
  'values_separator' => [
    'option' => 'values_separator',
    'data-attr' => 'data-decorate-both',
    'defaults' => '-',
    'type' => 'string',
    'description' => 'Set your own separator for close values. Used for double type. Default: 10 — 100. Or you may set: 10 to 100, 10 + 100, 10 → 100 etc.',
  ],
  'disable' => [
    'option' => 'disable',
    'data-attr' => 'data-disable',
    'defaults' => 0,
    'type' => 'boolean',
    'description' => 'Locks slider and makes it inactive. Input is disabled too. Invisible to forms',
  ],
  'block' => [
    'option' => 'block',
    'data-attr' => 'data-blokc',
    'defaults' => 0,
    'type' => 'boolean',
    'description' => 'Locks slider and makes it inactive. Input is NOT disabled. Can be send with forms',
  ],
  'extra_classes' => [
    'option' => 'extra_classes',
    'data-attr' => 'data-extra-classes',
    'defaults' => '—',
    'type' => 'string',
    'description' => 'Traverse extra CSS-classes to sliders container',
  ],
  'scope' => [
    'option' => 'scope',
    'data-attr' => '-',
    'defaults' => null,
    'type' => 'object',
    'description' => 'Scope for callbacks. Pass any object',
  ],
  'prettify' => [
    'option' => 'prettify',
    'data-attr' => '-',
    'defaults' => null,
    'type' => 'function',
    'description' => 'Set up your own prettify function. Can be anything. For example, you can set up unix time as slider values and than transform them to cool looking dates',
  ],
  'onStart' => [
    'option' => 'onStart',
    'data-attr' => '-',
    'defaults' => null,
    'type' => 'function',
    'description' => 'Callback. Is called on slider start. Gets all slider data as a 1st attribute',
  ],
  'onChange' => [
    'option' => 'onChange',
    'data-attr' => '-',
    'defaults' => null,
    'type' => 'function',
    'description' => 'Callback. IS called on each values change. Gets all slider data as a 1st attribute',
  ],
  'onFinish' => [
    'option' => 'onFinish',
    'data-attr' => '-',
    'defaults' => null,
    'type' => 'function',
    'description' => 'Callback. Is called when user releases handle. Gets all slider data as a 1st attribute',
  ],
  'onUpdate' => [
    'option' => 'onUpdate',
    'data-attr' => '-',
    'defaults' => null,
    'type' => 'function',
    'description' => 'Callback. Is called when slider is modified by external methods update or reset',
  ],
];
